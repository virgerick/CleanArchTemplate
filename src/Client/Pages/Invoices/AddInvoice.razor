@page "/Invoice"
@using CleanArchTemplate.Client.Pages.Customers.Components
@using CleanArchTemplate.Client.Pages.Services.Components
@using CleanArchTemplate.Shared.Responses.Customers
@using CleanArchTemplate.Shared.Responses.Routes
@using CleanArchTemplate.Shared.Responses.Services
@using System.Globalization

<RadzenBreadCrumb class="rz-mb-2">
    <RadzenBreadCrumbItem Path="/" Text="Home" />
    <RadzenBreadCrumbItem Path="/Invoice" Text="Invoice" />
</RadzenBreadCrumb>

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" Wrap="FlexWrap.Wrap">
    <RadzenStack Orientation="Orientation.Vertical">
        <RadzenFormField Text="Date" Variant="Variant.Text" class="rz-mb-1" >
            <ChildContent>
                <RadzenDatePicker TValue="DateTime" @bind-Value="_date" DateFormat="dd/MM/yyyy"></RadzenDatePicker>
            </ChildContent>
        </RadzenFormField>
        <RadzenFormField Text="Customer" Variant="Variant.Text" class="rz-mb-1" >
            <Start>
                <RadzenIcon Icon="contacts"></RadzenIcon>
            </Start>
            <ChildContent>
                <RadzenText Text="@(_customer?.Name??"No customer selected")" />
            </ChildContent>
            <End>
                <RadzenButton Icon="search"  Click="ChooseCustomerAsync" />
            </End>
        </RadzenFormField>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Vertical">
        <RadzenButton  Icon="add_circle_outline" 
                      Text="Add Service" Click="AddServiceAsync"/>
        <RadzenButton Icon="add_circle_outline" Text="Add Route" Click="AddRouteAsync"/>
    </RadzenStack>
</RadzenStack>

<RadzenDataGrid @ref="_gridLines" AllowAlternatingRows="true" AllowFiltering="true" AllowPaging="true" PageSize="5"
    AllowSorting="true" EditMode="DataGridEditMode.Single" Responsive="true" Data="@_lines" TItem="InvoiceLineResponse"
     ColumnWidth="200px">
    <EmptyTemplate>
        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
    </EmptyTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="InvoiceLineResponse" Context="Service" Filterable="true" Sortable="true"
            TextAlign="TextAlign.Center" Width="100%" Title="Description">
             <Template Context="service">
                 <RadzenText Text="@service.Description" />
              </Template>
                       
        </RadzenDataGridColumn>     
        <RadzenDataGridColumn TItem="InvoiceLineResponse" Context="Service" Filterable="true" Sortable="true"
            TextAlign="TextAlign.Center" Width="100%" Title="Quantity">
             <Template Context="service">
                 <RadzenText Text="@service.Quantity.ToString()" />
              </Template>
                       
        </RadzenDataGridColumn>  
        <RadzenDataGridColumn TItem="InvoiceLineResponse" Context="Service" Filterable="true" Sortable="true"
            TextAlign="TextAlign.Center" Width="100%" Title="Price">
             <Template Context="line">
                           <RadzenText Text="@line.Price.ToString(CultureInfo.InvariantCulture)" />
              </Template>
        </RadzenDataGridColumn>     
        <RadzenDataGridColumn TItem="InvoiceLineResponse" Context="Service" Filterable="true" Sortable="true"
            TextAlign="TextAlign.Center" Width="100%" Title="Total">
             <Template Context="line">
                           <RadzenText Text="@line.Total.ToString(CultureInfo.InvariantCulture)" />
              </Template>
        </RadzenDataGridColumn>   
     
        <RadzenDataGridColumn TItem="InvoiceLineResponse" Context="Service" Filterable="true" Sortable="true" 
            TextAlign="TextAlign.Center" Width="100%">
            <Template Context="service">
                <RadzenButton Icon="pan_tool_alt"  Variant="Variant.Flat"
                    Size="ButtonSize.Medium" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>

</RadzenDataGrid>

@code{
    private RadzenDataGrid<InvoiceLineResponse> _gridLines;
    List<InvoiceLineResponse> _lines = new List<InvoiceLineResponse>();
    CustomerResponse _customer = null!;
    DateTime _date = DateTime.Today;
    private async Task ChooseCustomerAsync()
    {
        var options=    new DialogOptions
        {
            CloseDialogOnOverlayClick=false,
        };
        var result = await DialogService.OpenAsync<SearchCustomer>("Customer selector",options:options);
        if (result is CustomerResponse customer)
        {
            _customer = customer;
            Console.Write("Customer selected: " + customer.Name);
           
        }
    }
    private async Task<int> GetQuantityAsync()
    {
        var quantityResult = await DialogService.OpenAsync<QuantityInput>("Select a quantity");
        var quantity = 1;
        if (quantityResult is int qty)
        {
            quantity = qty;
        }
        return quantity;
    }
    private async Task AddRouteAsync()
    {
        var options=    new DialogOptions
        {
            CloseDialogOnOverlayClick=false
        };
        var result = await DialogService.OpenAsync<SearchRoute>("Search Service",options:options);
        if (result is RouteResponse route)
        {
           var line= InvoiceLineResponse.CreateFromService(route.Display, route.Id, route.Amount, await GetQuantityAsync());
            await _gridLines.InsertRow(line);
        }
    }
    private async Task AddServiceAsync()
    {
        var options =    new DialogOptions
        {
            CloseDialogOnOverlayClick=false
        };
        var result = await DialogService.OpenAsync<SearchService>("Search Service",options:options);
        if (result is ServiceResponse service)
        {
            var quantity = await GetQuantityAsync();
            var line= InvoiceLineResponse.CreateFromService(service.Name, service.Id, service.Amount, quantity);
            await _gridLines.InsertRow(line);
        }
    }


    
}
