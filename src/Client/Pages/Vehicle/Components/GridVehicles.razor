

<RadzenButton ButtonStyle="ButtonStyle.Success"
              Icon="add_circle_outline"
              class="mt-2 mb-4"
              Text="Add New Order"
              Click="@InsertRow"
              Disabled=@(vehicleToInsert != null || vehicleToUpdate != null) />
<RadzenDataGrid @ref="vehiclesGrid"
                AllowAlternatingRows="false"
                AllowFiltering="true"
                AllowPaging="true"
                PageSize="5"
                AllowSorting="true"
                EditMode="DataGridEditMode.Single" Responsive="true"
                Data="@vehicles" TItem="VehicleResponse" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
    <Columns>
        <RadzenDataGridColumn TItem="VehicleResponse" Property="PlateNumber" Title="Plate Number">
            <EditTemplate Context="vehicle">
                <RadzenTextBox @bind-Value="vehicle.PlateNumber" Style="width:100%; display: block" Name="PlateNumber" />
                <RadzenRequiredValidator Text="PlateNumber is required" Component="PlateNumber" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="VehicleResponse" Property="Type" Title="Type">
            <EditTemplate Context="vehicle">
                <RadzenDropDown Data="Types" @bind-Value="vehicle.Type" Style="width:100%; display: block" Name="Type" />
                <RadzenRequiredValidator Text="Type is required" Component="Type" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="VehicleResponse" Property="Brand" Title="Brand">
            <EditTemplate Context="vehicle">
                <RadzenTextBox @bind-Value="vehicle.Brand" Style="width:100%; display: block" Name="Brand" />
                <RadzenRequiredValidator Text="Brand is required" Component="Brand" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="VehicleResponse" Property="Model" Title="Model">
            <EditTemplate Context="vehicle">
                <RadzenTextBox @bind-Value="vehicle.Model" Style="width:100%; display: block" Name="Model" />
                <RadzenRequiredValidator Text="Model is required" Component="Model" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="VehicleResponse" Property="Status" Title="Status">
            <EditTemplate Context="vehicle">
                <RadzenDropDown Data="Status" @bind-Value="vehicle.Status" Style="width:100%; display: block" Name="Status" />
                <RadzenRequiredValidator Text="Status is required" Component="Status" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="VehicleResponse" Context="vehicle" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
            <Template Context="vehicle">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(vehicle))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(vehicle))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="vehicle">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(vehicle))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(vehicle))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(vehicle))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>

</RadzenDataGrid>

@code {
    RadzenDataGrid<VehicleResponse> vehiclesGrid;
    IEnumerable<VehicleResponse> vehicles;
    List<string> Types = new() {"Car","Truck","Bus"  };
    List<string> Status = new() {"Available","Maintenance","OutOfService"};
    VehicleResponse vehicleToInsert;
    VehicleResponse vehicleToUpdate;

    void Reset()
    {
        vehicleToInsert = null;
        vehicleToUpdate = null;
    }

    protected  override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetVehiclesAsync();
    }
    async Task GetVehiclesAsync()
    {
        try
        {
            var result = await VehicleApiService.GetAsync();
            result.ThrowIfNotSucceded();
            vehicles = result.Items.AsQueryable();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Detail = ex.Message


            }); ;
        }
    }
    async Task EditRow(VehicleResponse vehicle)
    {
        vehicleToUpdate = vehicle;
        await vehiclesGrid.EditRow(vehicle);
    }

    void OnUpdateRow(VehicleResponse vehicle)
    {
        if (vehicle == vehicleToInsert)
        {
            vehicleToInsert = null;
        }

        vehicleToUpdate = null;
    }

    async Task SaveRow(VehicleResponse vehicle)
    {
        await vehiclesGrid.UpdateRow(vehicle);
    }

    void CancelEdit(VehicleResponse vehicle)
    {
        if (vehicle == vehicleToInsert)
        {
            vehicleToInsert = null;
        }

        vehicleToUpdate = null;

        vehiclesGrid.CancelEditRow(vehicle);

    }

    async Task DeleteRow(VehicleResponse vehicle)
    {
        if (vehicle == vehicleToInsert)
        {
            vehicleToInsert = null;
        }

        if (vehicle == vehicleToUpdate)
        {
            vehicleToUpdate = null;
        }

        if (vehicles.Contains(vehicle))
        {
            /*
            dbContext.Remove<Order>(order);

            dbContext.SaveChanges();
            */
            await vehiclesGrid.Reload();
        }
        else
        {
            vehiclesGrid.CancelEditRow(vehicle);
            await vehiclesGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        vehicleToInsert = new VehicleResponse();
        await vehiclesGrid.InsertRow(vehicleToInsert);
    }

    void OnCreateRow(VehicleResponse vehicle)
    {

        vehicleToInsert = null;
    }
}
